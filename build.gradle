apply plugin: 'java'
apply plugin: 'jacoco'

def versionInfo = new Properties()
file("res/update.properties").withInputStream { versionInfo.load(it) }

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.9.1'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.20.0'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.7.v20170914'
    compile group: 'org.eclipse.jetty', name: 'jetty-http', version: '9.4.7.v20170914'
    compile group: 'org.eclipse.jetty', name: 'jetty-io', version: '9.4.7.v20170914'
    compile group: 'org.eclipse.jetty', name: 'jetty-util', version: '9.4.7.v20170914'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.7.v20170914'
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: '2.26'
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-jetty-http', version: '2.26'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.26'
    compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.26'
    compile group: 'org.glassfish.jersey.bundles', name: 'jaxrs-ri', version: '2.26'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.0'
    compile group: 'javax.persistence', name: 'persistence-api', version: '1.0.2'
    compile group: 'net.sourceforge.htmlunit', name: 'htmlunit', version: '2.13'

    testCompile 'junit:junit:4.12'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.7.3'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '1.7.3'

}

sourceSets {
    main {
        java {
            srcDirs = ['src/main']
            outputDir = file("bin/main")
        }
        resources {
            srcDirs = ['res']
        }
    }
    test {
        java {
            srcDirs = ['src/test']
            outputDir = file("bin/test")
        }
        resources {
            srcDir "src/test"
        }
    }
    updater {
        java {
            srcDirs = ['src/updater']
            outputDir = file("bin/updater")
        }
    }
    updaterTest {
        java {
            srcDirs = ['src/updaterTest']
            outputDir = file("bin/updaterTest")
        }
    }
}

jacoco {
    toolVersion = "0.7.9"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    testLogging {
        showStandardStreams = true
    }
}

jar {
    def bn = versionInfo.getProperty("build.number") as Integer
    destinationDir = file('application/lib')
    baseName 'Centsa-v' +
            versionInfo.getProperty("major.version") +
            "." + versionInfo.getProperty("minor.version") +
            ".build-" + ++bn
    doLast {
        versionInfo.setProperty("build.number", bn as String)
        saveProperties(versionInfo, "res/update.properties")
    }
}

compileUpdaterTestJava {
    classpath += configurations.testCompile
}

task cleanLib {
    doLast {
        delete fileTree('application/lib') {
            exclude '**/' + jar.baseName + '.jar'
        }
        delete fileTree('lib')
    }
}

task copyToLib(dependsOn: cleanLib) {
    doLast {
        copy {
            into "application/lib"
            from configurations.compile
        }
        copy {
            into "lib"
            from configurations.testCompile
        }
    }
}

task eclipseClasspath(dependsOn: copyToLib) {
    doLast {
        def cp = "";
        Set jars = []
        def libDir = file("application/lib")
        if (libDir.exists()) {
            libDir.eachFile() {
                if (jars.add(it.name)) {
                    cp += '<classpathentry kind="lib" path="' + it.path.replace("\\", "/") + '"/>\n'
                }
            }
        }
        libDir = file("lib")
        if (libDir.exists()) {
            libDir.eachFile() {
                if (jars.add(it.name)) {
                    cp += '<classpathentry kind="lib" path="' + it.path.replace("\\", "/") + '"/>\n'
                }
            }
        }

        def f = new File('.classpath')
        def text = f.text.replaceAll('<classpathentry kind="lib" path="[^"]*.jar"/>', "")
        f.withWriter { w ->
            w << text.replaceAll("</classpath>", cp + "</classpath>").replaceAll("(?m)^[ \t]*\r?\n", "")
        }
    }
}

task tag {
    doLast {
        exec {
            executable "git"
            args "add", "-A"
        }
        exec {
            executable "git"
            args "commit", "-m", "Build new release"
        }
        exec {
            executable "git"
            args "tag", "-a", "v" + versionInfo.getProperty("major.version") +
                    "." + versionInfo.getProperty("minor.version"), "-m", "Release version v" +
                    versionInfo.getProperty("major.version") +
                    "." + versionInfo.getProperty("minor.version")
        }
    }
}

task zip(type: Zip) {
    doFirst {
        file("application").renameTo("Centsa")
    }
    from '.'
    include 'Centsa'
    include 'Centsa/**/*'
    exclude '*/data.db'
    exclude '*/Centsa.desktop'
    exclude '*/fuse*'
    exclude '*/log/*'
    archiveName 'Centsa-v' + versionInfo.getProperty("major.version") +
            "." + versionInfo.getProperty("minor.version") + '.zip'
    destinationDir(file('build'))
    doLast {
        file("Centsa").renameTo("application")
    }
}

task release(dependsOn: ['clean', 'build', 'zip', 'tag'])

task incrementMajor {
    def mv = versionInfo.getProperty("major.version") as Integer
    doLast {
        versionInfo.setProperty("major.version", ++mv as String)
        versionInfo.setProperty("minor.version", "0")
        saveProperties(versionInfo, "res/update.properties")
    }
}

task incrementMinor {
    def mv = versionInfo.getProperty("minor.version") as Integer
    doLast {
        versionInfo.setProperty("minor.version", ++mv as String)
        saveProperties(versionInfo, "res/update.properties")
    }
}

task major(dependsOn: ['incrementMajor', 'release'])

task minor(dependsOn: ['incrementMinor', 'release'])

task updaterClean {
    doLast {
        delete fileTree('application/updater')
    }
}

task updaterTest(type: Test) {
    testClassesDir = sourceSets.updaterTest.output.classesDir
    classpath += sourceSets.updaterTest.runtimeClasspath
}

task updaterBuild(type: Jar, dependsOn: ['updaterClean', 'updaterTest']) {
    def bn = versionInfo.getProperty("updater.build.number") as Integer
    destinationDir = file('application/updater')
    baseName 'Centsa-updater.build-' + ++bn
    from sourceSets.updater.output
    doLast {
        versionInfo.setProperty("updater.build.number", bn as String)
        saveProperties(versionInfo, "res/update.properties")
    }
}

ext.saveProperties = { props, filename ->
    def writer = new FileWriter(file(filename))
    try {
        props.store(writer, "")
        writer.flush()
    } finally {
        writer.close()
    }
}

build.dependsOn copyToLib, jacocoTestReport


