<project name="Centsa - build" default="build" basedir=".." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant">

	<property name="version.info" value="1" />
	<property name="app.name" value="Centsa" />

	<property name="build.dir" value="build" />

	<property name="build.lib.dir" value="${build.dir}/lib" />
	<property name="release.dir" value="${build.dir}/release" />
	<property name="lib.dir" value="${release.dir}/lib" />

	<path id="build.lib.path">
		<fileset dir="${build.lib.dir}" includes="*.jar" />
	</path>
	<path id="lib.path.id">
		<fileset dir="${lib.dir}" includes="*.jar" />
	</path>

	<target name="check-ivy">
		<available file="${build.lib.dir}/ivy.jar" property="ivy.present" />
	</target>

	<target name="download-ivy" unless="ivy.present">
		<property name="ivy.install.version" value="2.4.0" />
		<mkdir dir="${build.lib.dir}" />
		<get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${build.lib.dir}/ivy.jar" usetimestamp="true" />
	</target>

	<target name="resolve-dependencies" depends="check-ivy,download-ivy">
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="build.lib.path" />
		<mkdir dir="${lib.dir}" />
		<property name="packaging.type" value="jar" />
		<ivy:retrieve pathid="lib.path.id" pattern="${lib.dir}/[artifact].[ext]" conf="rt" />
		<ivy:retrieve pattern="${build.lib.dir}/[artifact].[ext]" conf="build" />
	</target>

	<target name="prepare-eclipse-classpath" depends="resolve-dependencies">
		<path id="jar-fileset">
			<path refid="lib.path.id" />
			<path refid="build.lib.path" />
		</path>
		<pathconvert pathsep="&quot;/&gt;${line.separator}&#x9;&lt;classpathentry kind=&quot;lib&quot; path=&quot;" property="eclipse-jars" refid="jar-fileset" />
		<property name="libs" value="&#x9;&lt;classpathentry kind=&quot;lib&quot; path=&quot;${eclipse-jars}&quot;/&gt;" />
		<replaceregexp file=".classpath" match="&lt;classpathentry kind=&quot;lib&quot; path=&quot;.*\.jar&quot;/&gt;" replace="" flags="g" />
		<replaceregexp file=".classpath" match="(\r?\n)\s*\r?\n" flags="g" replace="\1" />
		<replace file=".classpath" token="&lt;/classpath&gt;" value="${libs}&#10;&lt;/classpath&gt;" />
	</target>

	<target name="build" depends="jar,test-report,build-importers" />

	<target name="clean">
		<delete dir="${build.dir}">
			<exclude name="build.xml" />
			<exclude name="release/**/**.*" />
			<exclude name="lib/**.*" />
			<exclude name="*.zip" />
		</delete>
		<delete dir="bin" />
		<mkdir dir="bin" />
	</target>


	<target name="jar" depends="compile">
		<buildnumber />
		<delete dir="${release.dir}/lib/">
			<include name="${app.name}*.jar" />
		</delete>
		<jar destfile="${release.dir}/lib/${app.name}.v${version.info}.build-${build.number}.jar">
			<fileset dir="bin">
				<exclude name="**/*TEST.class" />
				<exclude name="**/*MOCK.class" />
			</fileset>
			<zipfileset dir="res" includes="**/*" />
		</jar>
	</target>

	<target name="compile" depends="resolve-dependencies,clean">
		<javac srcdir="src" destdir="bin" target="1.8" source="1.8" debug="on" classpathref="lib.path.id" />
	</target>

	<target name="test-report" depends="test" if="test.complete">
		<jacoco:report xmlns:jacoco="antlib:org.jacoco.ant">
			<executiondata>
				<file file="${build.dir}/jacoco.exec" />
			</executiondata>
			<structure name="${app.name}">
				<classfiles>
					<fileset dir="bin">
						<exclude name="**/*TEST*" />
						<exclude name="**/*MOCK*" />
					</fileset>
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="src">
						<exclude name="**/*TEST*" />
						<exclude name="**/*MOCK*" />
					</fileset>
				</sourcefiles>
			</structure>
			<html destdir="${build.dir}/report" />
		</jacoco:report>
	</target>

	<target name="test" depends="resolve-dependencies">
		<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpathref="build.lib.path" />
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" classpathref="build.lib.path" />
		<jacoco:coverage destfile="${build.dir}/jacoco.exec">
			<junit dir="." fork="true" showoutput="true" printsummary="withOutAndErr" haltonerror="true" haltonfailure="true" failureproperty="test.failed">
				<formatter type="plain" usefile="false" />
				<classpath>
					<pathelement location="bin" />
					<pathelement location="res" />
					<fileset dir="${build.lib.dir}" />
				</classpath>
				<batchtest>
					<fileset dir="bin" includes="**/*TEST.class" />
				</batchtest>
			</junit>
		</jacoco:coverage>

		<available file="build/jacoco.exec" property="test.complete" />
	</target>

	<target name="release" depends="clean-release,build" description="Builds a release zip">
		<replaceregexp match='org.slf4j.simpleLogger.defaultLogLevel=.*' replace='org.slf4j.simpleLogger.defaultLogLevel=info'>
			<fileset dir="${release.dir}" includes="simplelogger.properties" />
		</replaceregexp>
		<move file="${release.dir}" tofile="${build.dir}/${app.name}" />
		<zip destfile="${build.dir}/${app.name}.v${version.info}.zip">
			<zipfileset dir="${build.dir}">
				<include name="${app.name}/**/**.*" />
				<exclude name="${app.name}/log/*" />
				<exclude name="${app.name}/data.db" />
			</zipfileset>
		</zip>
		<move tofile="${release.dir}" file="${build.dir}/${app.name}" />
		<script language="javascript">
			<![CDATA[
		 	project.setProperty("new.version", parseInt(project.getProperty("version.info"))+1);
		    ]]>
		</script>
		<replaceregexp match='name="version.info" value="\d*' replace='name="version.info" value="${new.version}'>
			<fileset dir="${build.dir}" includes="build.xml" />
		</replaceregexp>
	</target>

	<target name="clean-release">
		<delete>
			<fileset dir="${release.dir}/lib">
				<exclude name="${app.name}*" />
			</fileset>
		</delete>
	</target>

	<target name="build-importers" depends="resolve-dependencies" description="">
		<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="build.lib.path" />
		<for param="dir" list="default,custom1">
			<sequential>
				<mkdir dir="importer_bin/@{dir}" />
				<javac srcdir="importer_src/@{dir}" destdir="importer_bin/@{dir}" target="1.8" source="1.8" debug="on" classpathref="lib.path.id" />
				<jar destfile="${build.dir}/Centsa.importer.@{dir}.jar" basedir="importer_bin/@{dir}" />
			</sequential>
		</for>
		<copy todir="${release.dir}/lib">
			<fileset dir="${build.dir}">
				<include name="Centsa.importer.default.jar" />
			</fileset>
		</copy>
	</target>

	<target name="run">
		<java classname="nohorjo.centsa.Main" fork="true">
			<classpath>
				<pathelement location="${release.dir}/lib/*" />
				<pathelement location="${release.dir}" />
			</classpath>
			<jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=n" />
		</java>
	</target>

	<target name="build-run" depends="jar,run" description="">
	</target>

</project>
